{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/src/js/lib/helper.js","webpack:///./assets/src/js/map-scripts/add-listing/google-map.js"],"names":["get_dom_data","key","dom_content","document","body","innerHTML","length","pattern","RegExp","terget_content","exec","dom_data","JSON","parse","$","ready","localized_data","placeSearch","map","autocomplete","address_input","markers","info_window","$manual_lat","$manual_lng","saved_lat_lng","info_content","loc_default_latitude","parseFloat","default_latitude","loc_default_longitude","default_longitude","loc_manual_lat","manual_lat","loc_manual_lng","manual_lng","loc_map_zoom_level","parseInt","map_zoom_level","isNaN","lat","lng","google","maps","InfoWindow","content","maxWidth","getElementById","addEventListener","geolocate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","initAutocomplete","places","Autocomplete","types","addListener","fillInAddress","place","getPlace","val","geometry","location","setCenter","marker","Marker","push","initMap","Map","zoom","draggable","title","marker_title","geocoder","Geocoder","e","preventDefault","geocodeAddress","event","deleteMarker","latLng","addMarker","resultsMap","address","value","LatLng","opt","geocode","results","status","alert","geocode_error_msg","on","i","setMap","jQuery"],"mappings":"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","file":"../js/global-add-listing-gmap-custom-script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","function get_dom_data ( key ) {\n    var dom_content = document.body.innerHTML;\n\n    if ( ! dom_content.length ) { return ''; }\n\n    var pattern = new RegExp(\"(<!-- directorist-dom-data::\" + key + \"\\\\s)(.+)(\\\\s-->)\");\n    var terget_content = pattern.exec( dom_content );\n\n    if ( ! terget_content ) { return ''; }\n    if ( typeof terget_content[2] === 'undefined' ) { return ''; }\n    \n    var dom_data = JSON.parse( terget_content[2] );\n\n    if ( ! dom_data ) { return ''; }\n\n    return dom_data;\n}\n\n\nexport { get_dom_data };","import { get_dom_data } from '../../lib/helper';\n\n(function($) {\n        $(document).ready(function() {\n                var localized_data = get_dom_data( 'map_data' );\n\n                // initialize all vars here to avoid hoisting related misunderstanding.\n                let placeSearch;\n                let map;\n                let autocomplete;\n                let address_input;\n                let markers;\n                let info_window;\n                let $manual_lat;\n                let $manual_lng;\n                let saved_lat_lng;\n                let info_content;\n\n                // Localized Data\n                const loc_default_latitude = parseFloat(localized_data.default_latitude);\n                const loc_default_longitude = parseFloat(localized_data.default_longitude);\n                let loc_manual_lat = parseFloat(localized_data.manual_lat);\n                let loc_manual_lng = parseFloat(localized_data.manual_lng);\n                const loc_map_zoom_level = parseInt(localized_data.map_zoom_level);\n\n                loc_manual_lat = isNaN(loc_manual_lat) ? loc_default_latitude : loc_manual_lat;\n                loc_manual_lng = isNaN(loc_manual_lng) ? loc_default_longitude : loc_manual_lng;\n\n                $manual_lat = $('#manual_lat');\n                $manual_lng = $('#manual_lng');\n\n                saved_lat_lng = {\n                        lat: loc_manual_lat,\n                        lng: loc_manual_lng,\n                };\n\n                // default is London city\n                (info_content = localized_data.info_content),\n                        (markers = []), // initialize the array to keep track all the marker\n                        (info_window = new google.maps.InfoWindow({\n                                content: info_content,\n                                maxWidth: 400,\n                        }));\n\n                // if(address_input){\n                //         address_input = document.getElementById('address');\n                //         address_input.addEventListener('focus', geolocate);\n                // }\n\n                        address_input = document.getElementById('address');\n                        if(address_input !== null){\n                                address_input.addEventListener('focus', geolocate);\n                        }\n\n                // this function will work on sites that uses SSL, it applies to Chrome especially, other browsers may allow location sharing without securing.\n                function geolocate() {\n                        if (navigator.geolocation) {\n                                navigator.geolocation.getCurrentPosition(function(position) {\n                                        const geolocation = {\n                                                lat: position.coords.latitude,\n                                                lng: position.coords.longitude,\n                                        };\n                                        const circle = new google.maps.Circle({\n                                                center: geolocation,\n                                                radius: position.coords.accuracy,\n                                        });\n                                        autocomplete.setBounds(circle.getBounds());\n                                });\n                        }\n                }\n\n                function initAutocomplete() {\n                        // Create the autocomplete object, restricting the search to geographical\n                        // location types.\n                        autocomplete = new google.maps.places.Autocomplete(address_input, { types: [] });\n\n                        // When the user selects an address from the dropdown, populate the necessary input fields and draw a marker\n                        autocomplete.addListener('place_changed', fillInAddress);\n                }\n\n                function fillInAddress() {\n                        // Get the place details from the autocomplete object.\n                        const place = autocomplete.getPlace();\n\n                        // set the value of input field to save them to the database\n                        $manual_lat.val(place.geometry.location.lat());\n                        $manual_lng.val(place.geometry.location.lng());\n                        map.setCenter(place.geometry.location);\n                        const marker = new google.maps.Marker({\n                                map,\n                                position: place.geometry.location,\n                        });\n\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n                }\n\n                initAutocomplete(); // start google map place auto complete API call\n\n                function initMap() {\n                        /* Create new map instance */\n                        map = new google.maps.Map(document.getElementById('gmap'), {\n                                zoom: loc_map_zoom_level,\n                                center: saved_lat_lng,\n                        });\n                        const marker = new google.maps.Marker({\n                                map,\n                                position: saved_lat_lng,\n                                draggable: true,\n                                title: localized_data.marker_title,\n                        });\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n\n                        // create a Geocode instance\n                        const geocoder = new google.maps.Geocoder();\n\n                        document.getElementById('generate_admin_map').addEventListener('click', function(e) {\n                                e.preventDefault();\n                                geocodeAddress(geocoder, map);\n                        });\n\n                        // This event listener calls addMarker() when the map is clicked.\n                        google.maps.event.addListener(map, 'click', function(event) {\n                                deleteMarker(); // at first remove previous marker and then set new marker;\n                                // set the value of input field to save them to the database\n                                $manual_lat.val(event.latLng.lat());\n                                $manual_lng.val(event.latLng.lng());\n                                // add the marker to the given map.\n                                addMarker(event.latLng, map);\n                        });\n                        // This event listener update the lat long field of the form so that we can add the lat long to the database when the MARKER is drag.\n                        google.maps.event.addListener(marker, 'dragend', function(event) {\n                                // set the value of input field to save them to the database\n                                $manual_lat.val(event.latLng.lat());\n                                $manual_lng.val(event.latLng.lng());\n                        });\n                }\n\n                /*\n                 * Geocode and address using google map javascript api and then populate the input fields for storing lat and long\n                 * */\n\n                function geocodeAddress(geocoder, resultsMap) {\n                        const address = address_input.value;\n                        const lat = parseFloat(document.getElementById('manual_lat').value);\n                        const lng = parseFloat(document.getElementById('manual_lng').value);\n                        const latLng = new google.maps.LatLng(lat, lng);\n                        const opt = { location: latLng, address };\n                        geocoder.geocode(opt, function(results, status) {\n                                if (status === 'OK') {\n                                        // set the value of input field to save them to the database\n                                        $manual_lat.val(results[0].geometry.location.lat());\n                                        $manual_lng.val(results[0].geometry.location.lng());\n                                        resultsMap.setCenter(results[0].geometry.location);\n                                        const marker = new google.maps.Marker({\n                                                map: resultsMap,\n                                                position: results[0].geometry.location,\n                                        });\n\n                                        // marker.addListener('click', function () {\n                                        //     info_window.open(map, marker);\n                                        // });\n\n                                        deleteMarker();\n                                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                                        markers.push(marker);\n                                } else {\n                                        alert(localized_data.geocode_error_msg + status);\n                                }\n                        });\n                }\n\n                initMap();\n\n                // adding features of creating marker manually on the map on add listing page.\n                /* var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        var labelIndex = 0; */\n\n                // Adds a marker to the map.\n                function addMarker(location, map) {\n                        // Add the marker at the clicked location, and add the next-available label\n                        // from the array of alphabetical characters.\n                        const marker = new google.maps.Marker({\n                                position: location,\n                                /* label: labels[labelIndex++ % labels.length], */\n                                draggable: true,\n                                title: localized_data.marker_title,\n                                map,\n                        });\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n                }\n\n                // Delete Marker\n                $('#delete_marker').on('click', function(e) {\n                        e.preventDefault();\n                        deleteMarker();\n                });\n\n                function deleteMarker() {\n                        for (let i = 0; i < markers.length; i++) {\n                                markers[i].setMap(null);\n                        }\n                        markers = [];\n                }\n        });\n})(jQuery);\n"],"sourceRoot":""}